{-# LANGUAGE TypeApplications          #-}
{-# LANGUAGE DataKinds                 #-}

import Test.Hspec

import Data
import DanceView
import Control.Monad
import Data.Generics.Record


-- For scenario's (S)
rawKps1 = [ 0,0,0,442.1,209.347,0.695157,412.838,219.106,0.479542 , 262.192,217.143,0.473475,189.773,268.065,0.635878,475.367 , 207.423,0.677412,551.767,191.757,0.792323,500.895,133.037 , 0.771379,434.342,365.826,0.563359,383.463,483.28,0.467892 , 0,0,0,477.408,367.805,0.568175,489.1,489.135,0.643315 , 483.238,631.949,0.657399,0,0,0,0,0,0,0,0,0,397.158,191.758 , 0.105753 ]

rawKps2 = [ 352.19,226.939,0.643588,442.135,211.243,0.653615,412.839 , 215.217,0.279017,0,0,0,0,0,0,475.393,207.422,0.669059,555.741 , 187.794,0.825329,504.774,129.137,0.751591,446.042,354.142 , 0.493266,491.051,479.335,0.443765,490.999,626.073,0.576288 , 481.309,354.172,0.546769,479.396,477.38,0.55193,481.283 , 618.331,0.206265,350.207,215.221,0.257444,363.899,223.071 , 0.545837,0,0,0,397.153,219.145,0.297215 ]

-- These are frames 945 and 946 of Kiezsa, which should probably match up in
-- some reasonable way.
--
-- Here at a glance we see that 
--
--      945_1 |-> 946_2
--      945_2 |-> 946_1
--

c_945_1 = [ 676.977,132.988,0.913514,659.36,177.963,0.844897,616.317 , 162.459,0.718869,536.026,180.084,0.813529,587.039,162.423 , 0.893409,698.468,187.811,0.785984,696.527,258.245,0.928367 , 651.552,225.01,0.920832,600.686,301.294,0.775754,571.278 , 399.085,0.859158,571.279,491.098,0.868918,657.403,305.245 , 0.670636,665.17,412.845,0.792783,671.083,516.51,0.78092 , 667.193,119.322,0.877167,686.725,129.067,0.833698,651.541 , 117.338,0.754344,700.411,133.052,0.728565 ]
c_945_2 = [ 633.965,84.1876,0.251206,616.331,113.467,0.56498,588.939 , 115.401,0.443873,581.088,54.7571,0.642762,631.951,68.51 , 0.653443,0,0,0,0,0,0 , 0,0,0,598.692,176.094,0.161728,0 , 0,0,0,0,0,631.872,181.941 , 0.128755,0,0,0,0,0,0 , 633.956,84.0718,0.225822,0,0,0,0 , 0,0,0,0,0 ]
c_945_3 = [ 0,0,0,0,0,0,631.95 , 103.716,0.141783,663.325,82.1718,0.330528,692.615,41.1551 , 0.620891,0,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,0,0,0,0,0,0,0,0,0 ]
c_945_4 = [ 0,0,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,643.74,115.363,0.372667,667.159,84.0922,0.182747 , 686.75,45.016,0.108315,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ]
c_946_1 = [ 633.952,82.1234,0.589192,616.302,113.447,0.833895,586.991 , 111.471,0.716806,579.135,52.91,0.806924,629.977,58.6892 , 0.721781,639.81,115.509,0.676911,651.588,101.873,0.0820315 , 0,0,0,587.043,193.633,0.294476,0 , 0,0,0,0,0,629.989,195.662 , 0.288095,0,0,0,0,0,0 , 633.914,72.3814,0.52461,639.794,80.242,0.416776,620.233 , 78.2908,0.260488,631.994,88.1126,0.122491 ]
c_946_2 = [ 678.915,133.146,0.921303,657.359,178.049,0.793344,618.242 , 166.298,0.683539,534.158,183.911,0.789755,588.916,164.438 , 0.930998,696.48,189.777,0.789976,694.633,262.191,0.90554 , 649.593,230.872,0.830823,600.592,301.3,0.77661,569.244 , 399.072,0.855132,569.379,490.989,0.854978,651.564,305.238 , 0.719133,665.199,408.924,0.82051,667.238,512.633,0.785829 , 673.03,123.296,0.796154,690.643,131.101,0.909906,653.522 , 117.48,0.842871,696.512,136.953,0.561481 ]
c_947_1 = [ 676.983,140.831,0.858448,661.233,178.107,0.842406,620.219 , 164.434,0.737359,536.023,189.798,0.774781,587.035,176.092 , 0.901575,694.62,193.66,0.864887,694.568,268.063,0.81479 , 649.609,240.731,0.677072,600.564,299.338,0.732374,563.453 , 397.181,0.830507,569.236,485.248,0.802054,651.538,305.233 , 0.735974,663.277,406.926,0.841603,665.233,510.66,0.803115 , 669.124,130.982,0.878298,686.746,133.111,0.879539,655.426 , 125.2,0.800603,696.478,144.771,0.677835 ]
c_947_2 = [ 633.862,82.1011,0.643951,614.356,117.474,0.800635,584.992 , 115.494,0.679291,573.235,52.8797,0.798698,624.155,54.9049 , 0.59071,635.936,121.327,0.619552,0,0,0 , 0,0,0,586.913,197.646,0.220505,0 , 0,0,0,0,0,622.182,203.509 , 0.173993,0,0,0,0,0,0 , 628.06,74.3372,0.573155,633.859,80.2343,0.175262,616.208 , 86.1334,0.558667,0,0,0 ]
c_2072_1 = [631.986,168.294,0.867922,665.258,209.427,0.931597,682.862 , 209.395,0.85708,700.438,277.814,0.639331,649.588,268.001 , 0.0698443,649.498,209.393,0.921615,663.271,281.743,0.894113 , 612.369,266.054,0.867246,700.477,336.563,0.652118,659.304 , 430.458,0.83956,708.273,510.645,0.840942,676.896,336.587 , 0.676389,586.902,434.332,0.653418,643.701,537.995,0.819433 , 630.015,162.357,0.940211,645.576,162.46,0.903926,0 , 0,0,665.242,166.332,0.89632 ]
c_2072_2 = [ 539.918,162.408,0.941431,553.768,195.612,0.918819,530.193 , 195.675,0.766104,0,0,0,0,0 , 0,581.114,193.781,0.884791,586.985,242.616,0.853615 , 540.043,219.103,0.942866,557.683,303.159,0.835972,539.918 , 369.763,0.958233,565.414,448.08,0.789062,594.773,301.294 , 0.794612,563.485,377.554,0.913276,584.948,440.206,0.503987 , 536.07,152.649,0.881548,549.742,156.484,0.852615,526.357 , 160.445,0.123945,565.459,162.434,0.907765 ]
c_2072_3 = [ 135.083,121.275,0.776391,135.024,131.11,0.95387,133.076 , 131.107,0.872116,129.127,144.82,0.705106,133.125,144.734 , 0.656291,150.649,131.017,0.836992,160.438,138.922,0.727174 , 0,0,0,133.127,158.446,0.901983,137.02 , 176.112,0.673482,150.673,191.722,0.608827,148.67,152.58 , 0.827633,150.681,176.021,0.75484,152.657,191.68,0.579234 , 135.012,119.355,0.711412,136.988,119.356,0.706013,133.084 , 119.399,0.534491,158.452,119.337,0.50085 ]
c_2072_4 = [ 974.297,160.418,0.803281,1019.37,211.273,0.78359,1001.72 , 209.296,0.634857,993.991,271.918,0.0576162,0,0 , 0,1034.97,211.335,0.86745,1023.3,271.908,0.921312 , 976.312,238.631,0.898237,997.819,350.246,0.651228,935.256 , 453.886,0.581534,933.228,508.662,0.719975,1038.96,354.156 , 0.656528,1031.08,477.361,0.648757,1050.66,585.021,0.717907 , 0,0,0,978.239,148.735,0.894531,0 , 0,0,995.863,160.433,0.926068 ]
c_2072_5 = [ 377.637,164.37,0.933575,414.879,187.818,0.879356,428.401 , 183.888,0.804633,463.73,209.388,0.843143,428.517,225.006 , 0.191998,410.81,191.738,0.892094,430.481,227.037,0.822359 , 383.504,230.841,0.712481,448.093,283.659,0.662964,428.387 , 354.137,0.801002,430.382,418.719,0.720625,434.374,285.663 , 0.772224,399.101,354.16,0.945819,448.075,414.728,0.838781 , 373.694,158.481,0.743037,383.498,160.456,0.958971,0 , 0,0,403.064,162.391,0.910483 ]
c_2072_6 = [ 0,0,0,158.458,129.143,0.803989,158.445 , 130.992,0.759283,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,162.413,148.76,0.70478,170.183 , 168.277,0.698882,172.144,187.796,0.600686,174.067,148.687 , 0.795228,175.997,166.342,0.809927,176.066,183.927,0.696215 , 0,0,0,0,0,0,0 , 0,0,0,0,0 ]
c_2073_1 = [ 632.018,179.984,0.909855,665.331,223.058,0.922887,690.623 , 223.025,0.873062,708.263,289.558,0.745117,675.014,283.715 , 0.0649179,647.666,223.048,0.882967,661.312,291.522,0.849475 , 602.676,273.999,0.8835,708.255,348.264,0.69003,655.43 , 430.4,0.781883,706.263,510.618,0.817221,676.968,352.113 , 0.711682,586.885,444.192,0.699808,649.549,539.993,0.814161 , 631.903,170.224,0.890546,645.642,174.132,0.874597,0 , 0,0,667.154,178.124,0.89953 ]
c_2073_2 = [ 137.019,119.438,0.854612,135.002,131.104,0.996664,133.031 , 131.106,0.903255,123.309,146.642,0.818621,133.108,146.662 , 0.719983,148.698,131.037,0.901371,158.488,138.948,0.778494 , 0,0,0,133.1,160.372,0.973693,136.988 , 178.07,0.776285,146.72,193.706,0.667146,146.732,154.58 , 0.868476,148.741,177.973,0.847845,150.673,193.668,0.662419 , 135.06,119.336,0.809575,138.942,119.316,0.739489,133.073 , 119.368,0.737371,154.56,117.481,0.474665 ]
c_2073_3 = [ 371.753,172.158,0.87805,414.779,193.595,0.915929,428.476 , 187.84,0.77807,467.585,211.326,0.841384,446.052,193.714 , 0.411326,403.027,193.725,0.803916,414.835,227.066,0.951056 , 363.905,236.771,0.819088,450.027,283.694,0.70261,428.389 , 360.012,0.806092,436.299,430.453,0.628397,432.352,287.596 , 0.799146,399.068,363.913,0.984608,442.158,430.421,0.783595 , 367.917,162.47,0.734604,381.499,164.353,1.00487,0 , 0,0,399.178,164.409,0.937952 ]
c_2073_4 = [ 534.12,166.285,0.869755,553.719,195.672,0.85051,537.987 , 195.636,0.663936,520.431,223.053,0.0838329,0,0 , 0,571.228,195.59,0.967936,583.043,240.675,0.813055 , 534.156,225.058,0.933394,567.401,303.167,0.777504,539.924 , 365.918,0.926183,565.467,444.145,0.692332,590.878,301.303 , 0.760105,561.521,377.574,0.89289,577.182,446.164,0.518488 , 526.272,162.276,0.954607,540.081,162.288,0.908168,520.417 , 164.357,0.0834243,559.551,164.291,0.892722 ]
c_2073_5 = [ 960.731,168.265,0.850846,1009.52,217.158,0.684582,997.841 , 219.104,0.600395,0,0,0,0,0 , 0,1015.45,213.334,0.811877,1017.39,260.248,0.819139 , 962.558,228.99,0.821743,992.018,356.127,0.694881,931.307 , 451.926,0.675912,917.614,520.429,0.772713,1035,361.933 , 0.675164,1025.29,473.504,0.679184,1048.7,585.065,0.725528 , 0,0,0,964.629,160.461,0.8428,0 , 0,0,988.025,164.413,0.870201 ]
c_2073_6 = [ 0,0,0,156.508,129.136,0.817442,156.496 , 130.985,0.746924,0,0,0,0,0 , 0,0,0,0,0,0,0 , 0,0,0,162.41,148.805,0.714498,0 , 0,0,0,0,0,172.159,148.736 , 0.801132,175.991,168.267,0.784755,176.058,185.917,0.674577 , 0,0,0,0,0,0,0 , 0,0,0,0,0 ]


--
c_572_1 = [ 585.084,144.769,0.936052,598.658,193.634,0.89551,553.714,191.748,0.859657,541.966,222.983,0.685485,553.762,256.252,0.861941,641.717,193.695,0.823568,682.888,224.945,0.888968,643.693,266.123,0.791303,557.687,330.644,0.688673,567.422,457.826,0.766147,567.35,582.99,0.695202,618.232,334.513,0.765183,610.452,453.885,0.738265,598.64,549.782,0.714802,575.223,133.07,0.913243,596.764,133.019,0.916011,569.253,135.007,0.500327,616.261,135.027,0.930151 ]
c_572_2 = [ 815.88,125.232,0.858978,817.839,152.582,0.902889,790.518,152.631,0.889177,774.85,191.738,0.945948,761.134,223.015,0.92818,837.423,152.607,0.891338,849.164,191.695,0.92144,853.095,224.978,0.962362,804.014,222.967,0.87743,809.983,271.969,0.794247,811.926,320.949,0.765591,825.624,222.972,0.849092,813.923,271.981,0.80536,804.154,322.841,0.836239,808.104,119.328,0.917662,819.829,119.352,0.948094,804.22,125.2,0.729393,825.703,125.249,0.866521 ]
c_573_1 = [ 586.873,146.813,0.971481,596.773,195.732,0.89935,553.632,197.621,0.882497,557.675,260.199,0.57216,553.733,269.993,0.590703,639.761,195.716,0.826447,682.837,226.906,0.90299,643.71,272.004,0.812582,561.5,334.551,0.695559,569.334,459.808,0.773003,569.318,588.943,0.674676,618.241,336.475,0.756518,610.468,455.835,0.741648,598.635,547.855,0.702714,575.221,138.9,0.869737,596.739,136.942,0.879669,569.245,146.646,0.649548,614.339,142.837,0.896273 ]
c_573_2 = [ 815.871,129.152,0.879387,815.861,158.458,0.86235,790.442,158.475,0.913428,774.855,193.679,0.981764,761.165,224.97,0.94105,837.31,160.351,0.904466,849.12,193.699,0.936753,853.101,226.998,0.983026,804.027,224.949,0.917664,811.933,273.91,0.800998,813.923,324.816,0.778911,823.744,224.934,0.892081,813.937,273.97,0.784488,802.201,326.727,0.797715,808.085,123.256,0.878219,819.815,125.176,0.909402,804.169,129.086,0.846731,825.625,129.151,0.859027 ]



c_564_1 = [ 588.913,133.117,0.908365,590.913,185.861,0.824785,541.942,180.041,0.893374,522.407,226.996,0.880318,541.926,289.564,0.864873,641.748,191.735,0.772282,661.317,236.754,0.86272,628.014,291.577,0.743949,555.583,328.671,0.732528,559.586,459.789,0.828622,604.544,530.187,0.708127,612.409,332.577,0.708155,598.691,455.824,0.738804,575.205,569.39,0.718187,583.048,127.158,0.872218,600.701,127.18,0.925684,569.401,131.049,0.734722,618.215,131.059,0.980126 ]
c_564_2 = [ 819.674,109.53,0.900616,819.874,138.927,0.941295,800.19,140.892,0.830862,790.358,178.11,0.956588,774.764,209.368,0.882294,841.303,136.979,0.853115,858.877,174.095,0.844976,864.816,207.371,0.912924,806.003,209.282,0.89263,806.089,260.214,0.919803,808.025,318.855,0.960515,833.452,209.29,0.881719,833.477,258.335,0.870101,835.371,309.127,0.812916,813.907,103.667,0.895603,821.731,101.858,0.971824,806.138,111.486,0.631376,831.5,109.546,0.842765 ]
c_565_1 = [ 587.04,132.979,0.931538,592.837,180.098,0.853363,545.851,178.1,0.85789,522.411,217.214,0.816033,540.098,277.841,0.81782,639.769,185.889,0.764291,663.342,230.88,0.886871,629.989,287.557,0.788473,555.569,322.848,0.710002,555.667,459.707,0.879147,586.927,495.055,0.505569,614.302,330.615,0.69042,600.633,457.843,0.765602,579.161,569.384,0.754436,581.112,123.252,0.839152,600.62,121.327,0.912122,569.369,129.164,0.610429,618.208,129.106,0.965368 ]
c_565_2 = [ 817.847,109.543,0.884659,819.825,138.885,0.944918,796.304,140.878,0.823879,788.435,178.07,0.952047,772.848,209.334,0.914698,839.417,136.956,0.862783,857.008,172.151,0.815871,864.726,207.381,0.855803,806.079,207.412,0.883424,806.194,258.305,0.908726,808.062,318.875,0.905122,835.347,207.374,0.860516,833.428,258.297,0.826586,827.618,311.055,0.764988,811.977,103.679,0.893197,821.705,103.665,0.958864,806.104,111.494,0.687546,831.473,109.58,0.847533 ]




















main :: IO ()
main = hspec $ do
    describe "Matchings" $ do
        it "(S) matches the same thing to itself" $ do
            let p1 = Person rawKps1 "a"

            let matches = matchings (2, 1) [p1] [p1]

            matches `shouldBe` [(p1, p1, 0)]


        it "(S) matches something close from frame to frame" $ do
            let p1 = Person rawKps1 "a"
                p2 = Person rawKps2 "b"

            let matches         = matchings (2, 1) [p1] [p2]
                [(p1', p2', _)] = matches

            (p1', p2') `shouldBe` (p1, p2)


        it "(S) matches multiple things that should match, to themselves, in any order" $ do
            let p1 = Person rawKps1 "a"
                p2 = Person rawKps2 "b"

            let combs = [ ([p1, p2], [p1, p2])
                        , ([p2, p1], [p1, p2])
                        , ([p2, p1], [p2, p1])
                        , ([p1, p2], [p2, p1])
                        ]

            forM_ combs $ \(c1, c2) -> do
                let matches = matchings (2, 1) c1 c2
                    [(a, b, _), (c, d, _)] = matches 

                (a, b) `shouldBe` (a, a)
                (c, d) `shouldBe` (c, c)


        it "matches up frames 945,946" $ do
            let peeps1 = [ Person c_945_1 "945_1"
                         , Person c_945_2 "945_2"
                         , Person c_945_3 "945_3"
                         , Person c_945_4 "945_4"
                         ]
                peeps2 = [ Person c_946_1 "946_1"
                         , Person c_946_2 "946_2"
                         ]
            let matches = matchings (946,945) peeps1 peeps2
                pp      = map (\(p1, p2, _) -> ( getField @"poseKeyPoints" p1
                                               , getField @"poseKeyPoints" p2)) matches
            
            length matches `shouldBe` 2
            
            ((c_945_1, c_946_2) `elem` pp) `shouldBe` True
            ((c_945_2, c_946_1) `elem` pp) `shouldBe` True


        it "matches up frames 946,947" $ do
            let peeps1 = [ Person c_946_1 "946_1"
                         , Person c_946_2 "946_2"
                         ]
                peeps2 = [ Person c_947_1 "947_1"
                         , Person c_947_2 "947_2"
                         ]
            let matches = matchings (947, 946) peeps1 peeps2
                pp      = map (\(p1, p2, _) -> ( getField @"poseKeyPoints" p1
                                               , getField @"poseKeyPoints" p2)) matches
            
            length matches `shouldBe` 2
            
            ((c_946_2, c_947_1) `elem` pp) `shouldBe` True
            ((c_946_1, c_947_2) `elem` pp) `shouldBe` True


        it "matches up frames 565,564" $ do
            let peeps1 = [ Person c_564_1 "564_1"
                         , Person c_564_2 "564_2"
                         ]
                peeps2 = [ Person c_565_1 "565_1"
                         , Person c_565_2 "565_2"
                         ]
            let matches = matchings (565, 564) peeps1 peeps2
                pp      = map (\(p1, p2, _) -> ( getField @"poseKeyPoints" p1
                                               , getField @"poseKeyPoints" p2)) matches
            
            length matches `shouldBe` 2
            
            ((c_564_1, c_565_1) `elem` pp) `shouldBe` True
            ((c_564_2, c_565_2) `elem` pp) `shouldBe` True


        it "matches up frames 573,572" $ do
            let peeps1 = [ Person c_572_1 "572_1"
                         , Person c_572_2 "572_2"
                         ]
                peeps2 = [ Person c_573_1 "573_1"
                         , Person c_573_2 "573_2"
                         ]
            let matches = matchings (573, 572) peeps1 peeps2
                pp      = map (\(p1, p2, _) -> ( getField @"poseKeyPoints" p1
                                               , getField @"poseKeyPoints" p2)) matches
            
            length matches `shouldBe` 2
            
            ((c_572_1, c_573_1) `elem` pp) `shouldBe` True
            ((c_572_2, c_573_2) `elem` pp) `shouldBe` True



        it "does the right thing on 2000 + 72,73" $ do
            let peeps1 = [ Person c_2072_1 "2072_1"
                         , Person c_2072_2 "2072_2"
                         , Person c_2072_3 "2072_3"
                         , Person c_2072_4 "2072_4"
                         , Person c_2072_5 "2072_5"
                         , Person c_2072_6 "2072_6"
                         ]
                peeps2 = [ Person c_2073_1 "2073_1"
                         , Person c_2073_2 "2073_2"
                         , Person c_2073_3 "2073_3"
                         , Person c_2073_4 "2073_4"
                         , Person c_2073_5 "2073_5"
                         , Person c_2073_6 "2073_6"
                         ]
            let matches = matchings (2073, 2072) peeps1 peeps2
                pp      = map (\(p1, p2, _) -> ( getField @"poseKeyPoints" p1
                                               , getField @"poseKeyPoints" p2)) matches
         
            -- Everything can be matched.
            length matches `shouldBe` length peeps1

            ((c_2072_1, c_2073_1) `elem` pp) `shouldBe` True
            ((c_2072_2, c_2073_4) `elem` pp) `shouldBe` True
            ((c_2072_3, c_2073_2) `elem` pp) `shouldBe` True
            ((c_2072_4, c_2073_5) `elem` pp) `shouldBe` True
            ((c_2072_5, c_2073_3) `elem` pp) `shouldBe` True
            ((c_2072_6, c_2073_6) `elem` pp) `shouldBe` True


